{"version":3,"sources":["Utils/Utils.js","Utils/Models.js","Services/LoginService.js","Components/Home.js","Services/EncounterService.js","Components/Encounter.js","Components/Dashboard.js","Redux/Reducer.js","Utils/Data.js","Redux/Store.js","Redux/ActionTypes.js","App.js","serviceWorker.js","index.js"],"names":["environment","Utils","message","footerMessage","Swal","fire","icon","title","text","footer","confirmBtnText","showCancelButton","showOkButton","confirmButtonColor","cancelButtonColor","confirmButtonText","User","userId","Math","floor","random","toString","name","email","password","Encounters","encounterId","encounterType","isDeleted","uname","pwd","finalUrl","axios","post","Home","props","useState","user","setUser","handleLoginDataChange","e","target","value","userCopy","className","onSubmit","preventDefault","sessionStorage","setItem","window","location","LoginService","checkUser","then","res","catch","error","showErrorMessage","htmlFor","type","id","placeholder","onChange","required","aria-hidden","url","config","headers","get","Encounter","setEncounter","includeDisableStatus","fetchData","includeDisabled","a","EncounterService","getEncounter","record","data","err","console","useEffect","Fragment","alert","EncounterType","Dashboard","state","component","loggedInUser","getItem","this","setState","onClick","logout","getComponent","Component","commonInitialState","encounter","encounterDate","patientName","transactions","store","createStore","action","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a53f1f85.chunk.js","sourcesContent":["import Swal from 'sweetalert2'\n\nexport const getRandomId = () => {\n    return Math.floor((Math.random()) * 0x10000).toString(16)\n}\n\nexport const environment = {\n    USER_API_BASE_URL :  \"http://localhost:8080\"\n}\n\nexport class Utils {\n\n    showErrorMessage(message, footerMessage) {\n        Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: message,\n            footer: footerMessage\n        })\n    }\n    showSuccessMessage(message) {\n        Swal.fire(\n            message,\n            'Your file has been deleted.',\n            'success'\n        )\n    }\n    showCustomConfirm(message, confirmBtnText) {\n        return Swal.fire({\n            title: 'Are you sure?',\n            text: message,\n            icon: 'warning',\n            showCancelButton: true,\n            showOkButton:true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: confirmBtnText\n        });\n    }\n\n    showConfirm() {\n        return Swal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, delete it!'\n        });\n    }\n    \n}","import { getRandomId } from \"./Utils\"\n\nexport class User {\n    userId = getRandomId()\n    name = \"\"\n    email = \"\"\n    password = \"\"\n}\n\nexport class Encounters {\n    encounterId = 0\n    encounterType = \"\"\n    isDeleted = false  \n}","import axios from 'axios';\r\nimport {environment} from '../Utils/Utils';\r\n\r\nclass LoginService {\r\n    //Check Tenat on Login\r\n    checkUser(uname,pwd) {\r\n        var url = environment.USER_API_BASE_URL + '/login';\r\n        var params = '?username=' + uname +'&password=' + pwd +'';        \r\n        var finalUrl = url + params;\r\n        let config = { \r\n\t\t\theaders:{ \r\n                'Access-Control-Allow-Origin': '*'\r\n            }\r\n        }\r\n        return axios.post(finalUrl);\r\n    } \r\n}\r\n\r\nexport default new LoginService();\r\n","import React, { useState } from 'react'\nimport { User } from '../Utils/Models'\nimport { Utils } from '../Utils/Utils'\nimport LoginService from '../Services/LoginService'\n\nfunction Home(props) {\n\n    const [user, setUser] = useState(new User())\n\n    const handleLoginDataChange = (e) => {\n        let name = e.target.name\n        let value = e.target.value\n        let userCopy = { ...user }\n        userCopy[name] = value\n        setUser(userCopy)\n    }\n\n    const login = (e) => {\n        e.preventDefault();  \n        sessionStorage.setItem(\"loggedIn\", true);\n        window.location = \"dashboard\";      \n        LoginService.checkUser(user.email, user.password)\n          .then(res => {  \n           // res.headers['content-type']\n              debugger;\n            var uname = user.email; //TODO: Needs to replace with actual name from response\n            sessionStorage.setItem(\"loggedIn\", true);\n            sessionStorage.setItem(\"uname\", uname);\n            window.location = \"dashboard\";\n          })\n          .catch(function(error) {\n              debugger;\n            new Utils().showErrorMessage(\"Invalid Username or Password1.\");\n        });\n    }\n\n    return (\n        <div  className=\"home-wrapper\">\n            <div className=\"overlay\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-2\"></div>\n                        <div className=\"col-sm-8 login-container\">\n                            <div className=\"login-content\">\n                                <h4 className=\"center-content\">Welcome to Practitioner App</h4>\n                                <form onSubmit={login}>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\">Email*:</label>\n                                        <input\n                                            type=\"email\"\n                                            className=\"form-control\"\n                                            id=\"email\"\n                                            name=\"email\"\n                                            placeholder=\"E.g. jhon@gmail.com\"\n                                            value={user.email}\n                                            onChange={handleLoginDataChange} required />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"password\">Password*:</label>\n                                        <input \n                                            type=\"password\" \n                                            className=\"form-control\" \n                                            id=\"password\" \n                                            name=\"password\" \n                                            placeholder=\"Enter your password\" \n                                            value={user.password} \n                                            onChange={handleLoginDataChange} required />\n                                    </div>\n                                    <div className=\"right-content\">\n                                        <button type=\"submit\" className=\"btn btn-primary\">\n                                            Login to Continue <i className=\"fa fa-arrow-right\" aria-hidden=\"true\"></i>\n                                        </button>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Home\n","import axios from 'axios';\r\nimport {environment} from '../Utils/Utils';\r\n\r\nclass EncounterService {\r\n    //Check Tenat on Login\r\n    async getEncounter() {\r\n        var url = environment.USER_API_BASE_URL + '/patient';        \r\n        let config = {\r\n\t\t\theaders:{ \r\n               'Authorization':'Bearer asdfasdfasdasfdsc' }\r\n\t\t}\r\n       return await axios.get(url,config);\r\n   \r\n    } \r\n}\r\n\r\nexport default new EncounterService();\r\n","import React, { useState ,useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { Encounters } from '../Utils/Models'\r\nimport { Utils } from '../Utils/Utils'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EncounterService from '../Services/EncounterService'\r\n\r\nfunction Encounter(props) {\r\n     const [Encounter, setEncounter] = useState(new Encounters())    \r\n    const [includeDisableStatus, setDisabledStatus] = useState(false);\r\n\r\n    const onEncounterValueChanged = (e) => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n        let EncounterCopy = { ...Encounter }\r\n        EncounterCopy[name] = value\r\n        setEncounter(EncounterCopy)\r\n    }\r\n\r\n    function handleIncludeDisabledChange(event) {\r\n        const loadAllRecords = event.target.checked; //get checkbox value\r\n        setDisabledStatus(loadAllRecords);\r\n      }\r\n\r\n      \r\n      const fetchData = async (includeDisabled) => {\r\n        await EncounterService.getEncounter()\r\n            .then(res =>\r\n              {\r\n                let record = res; //set response in variable              \r\n                Encounter.data = record;\r\n                setEncounter(Encounter);\r\n              })\r\n            .catch(err => {\r\n                console.error(err)});\r\n    }\r\n\r\nuseEffect(() => {\r\n    fetchData(includeDisableStatus);\r\n   }, []);\r\n\r\n    const saveEncounter = () => {\r\n        alert(Encounter.EncounterType);\r\n    }\r\n    const editModal = (e, item) => {\r\n            e.preventDefault();\r\n            let EncounterCopy = { ...Encounter }\r\n            EncounterCopy.EncounterId = item.EncounterId;\r\n            EncounterCopy.EncounterType = item.EncounterType;\r\n            setEncounter(EncounterCopy); \r\n           }\r\n\r\n           const deleteModel = (e, item) => {\r\n               e.preventDefault();\r\n               let EncounterCopy = { ...Encounter }\r\n               EncounterCopy.EncounterId = item.EncounterId;\r\n               EncounterCopy.EncounterType = item.EncounterType;\r\n               new Utils().showConfirm().then((result) => {\r\n                if (result.value) {\r\n                // TODO- delete records from server after confirmation \r\n                  Swal.fire(\r\n                    'Deleted!',\r\n                    'Your record has been deleted.',\r\n                    'success'\r\n                  )\r\n                }\r\n              });\r\n           }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"table-container\">\r\n                <h3 className=\"center-content text-primary\">Encounter</h3>\r\n                <form onSubmit={saveEncounter}>\r\n                <div className=\"row\">\r\n                <div className=\"col-sm-2\">\r\n                <button className=\"btn btn-primary\" id=\"btnEncounter\" type=\"submit\">Add New</button>\r\n                        </div>\r\n                       \r\n                </div>\r\n                </form>\r\n                <br></br>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered table-striped data-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Encounter Date</th>\r\n                                <th>Encounter Type</th>\r\n                                <th>Patient Name</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Encounter\r\n","import React, { Component } from 'react';\nimport Encounter from './Encounter';\n\nexport class Dashboard extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            component: \"\",\n            loggedInUser:\"\"\n        }\n    }\n\n    componentDidMount() {\n        if (sessionStorage.getItem(\"loggedIn\") !== \"true\") {\n            window.location = \"home\";\n        }\n        if (sessionStorage.getItem(\"uname\") != null ) {\n            this.setState({ loggedInUser: sessionStorage.getItem(\"uname\") })\n        }\n    }\n\n    getComponent(component) {\n        switch (component) {\n            case \"encounter\":\n                return <Encounter />\n            default:\n                return <Encounter />\n        }\n    }\n\n    logout() {\n        sessionStorage.setItem(\"loggedIn\", false);\n        sessionStorage.setItem(\"uname\", \"\");\n        window.location = '/';\n    }\n\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-2 side-nav\">\n                        <div className=\"center-content\"><i className=\"fa fa-paper-plane nav-icon\" aria-hidden=\"true\"></i></div>\n                        <span> Welcome {this.state.loggedInUser}</span>\n                        <span className=\"nav-link\" onClick={() => this.setState({ component: \"encounter\" })}>\n                            <div className=\"row\">\n                                <div className=\"col-2\"><i className=\"fa fa-hotel\"></i></div>\n                                <div className=\"col-10\">Encounter</div>\n                            </div>\n                        </span>\n                        <span className=\"nav-link\" onClick={this.logout}>\n                            <div className=\"row\">\n                                <div className=\"col-2\"><i className=\"fas fa-sign-out-alt\"></i></div>\n                                <div className=\"col-10\">Logout</div>\n                            </div>\n                        </span>\n                    </div>\n                    <div className=\"col-sm-10 dashboard-content\">\n                        {\n                            this.getComponent(this.state.component)\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard\n","import {ENCOUNTER } from \"../Utils/Data\";\nimport {ADD_ENCOUNTER} from \"./ActionTypes\";\n\nconst commonInitialState = {\n    encounter: ENCOUNTER,\n    transactions: []\n}\n\nexport const commonReducer = (state = commonInitialState, action) => {\n    switch (action.type) {\n            case ADD_ENCOUNTER:\n                return {\n                    ...state,\n                    encounter: [...state.encounter, action.data]\n            }\n        default:\n            return state\n    }\n}","export const USERS = [\n    { userId: 1, name: \"Admin\", email: \"admin@gmail.com\", password: \"1234\" }\n]\n\nexport const ENCOUNTER = [\n    { encounterId: 1, encounterDate: \"Sep 8 2020\", encounterType: \"Phone\", patientName: \"Pramod Gupta\"},\n    { encounterId: 2, encounterDate: \"Sep 9 2020\", encounterType: \"Phone\", patientName: \"Rakesh Gupta\"},\n    { encounterId: 3, encounterDate: \"Sep 19 2020\", encounterType: \"Phone\", patientName: \"Waseem Khan\"},\n    { encounterId: 4, encounterDate: \"Sep 23 2020\", encounterType: \"Phone\", patientName: \"Ronak Gupta\"},\n    { encounterId: 5, encounterDate: \"Sep 25 2020\", encounterType: \"Phone\", patientName: \"Heena Khan\"}\n]","import { createStore } from \"redux\";\nimport { commonReducer } from \"./Reducer\";\n\nexport const store = createStore(commonReducer)","export const ADD_ENCOUNTER= \"ADD_ENCOUNTER\"","import React from 'react';\nimport './App.css';\nimport Home from './Components/Home';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Dashboard from './Components/Dashboard';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/Store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/dashboard\" component={Dashboard}></Route>\n          <Route path=\"/\" component={Home}></Route>\n        </Switch>\n      </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}